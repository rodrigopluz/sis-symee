<?php

defined('BASEPATH') OR exit('No direct script access allowed');

/**
 * {{ title }} Controller
 *
 *  @author       : Rodrigo Pereira da Luz
 *  e-mail        : rodrigopluz@gmail.com
 *  item          : Sistema Web - Symee
 *  specification : Class {{ title }}
 */
class {{ title }} extends CI_Controller
{
    /**
{% for model in models %}
     * @param {{ model }}
{% endfor %}
     */
    public function __construct()
    {
        parent::__construct();
        $this->load->helper('dump');
        $this->load->library('session');

{% for model in models %}
        $this->load->model('{{ model }}');
{% endfor %}

        /*cache control*/
		$this->output->set_header('Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0');
		$this->output->set_header('Pragma: no-cache');
    }

    /**
     * Index a listing of {{ singular | lower | replace({'_': '_'}) }}.
     *
     * @return void
     */
    public function index()
    {
        if ($this->session->userdata('admin_login') != 1)
            redirect(base_url() . 'login', 'refresh');
        
        // $this->load->library('pagination');
        // include APPPATH . 'config/pagination.php';
        // $delimiters = array();
        // $delimiters['keyword'] = $this->input->get('keyword');
        // $config['base_url'] = base_url('{{ singular }}');
        // $config['suffix'] = '&keyword=' . $delimiters['keyword'];
        // $config['total_rows'] = $this->{{ model }}->get_all_{{ singular }}('{{ singular }}', $delimiters)->total_rows();
        // $delimiters['page'] = $this->input->get($config['query_string_segment']);
        // $delimiters['per_page'] = $config['per_page'];
        // $this->pagination->initialize($config);
        // $page_data['links'] = $this->pagination->create_links();

        $page_data['{{ plural }}'] = $this->{{ model }}->get_all_{{ singular }}();

        $page_data['page_name']  = '{{ singular }}/index';
        $page_data['page_title'] = get_phrase('{{ singular }}');

        $this->load->view('backend/index', $page_data);
    }

    /**
     * View the specified {{ singular | lower | replace({'_': '-'}) }}.
     * 
     * @param  int $id
     * @return void
     */
    public function show($id)
    {
        if ( ! isset($id)) {
            show_404();
        }

        $data['{{ singular }}'] = $this->{{ type }}->find('{{ singular }}', $id);

        $this->load->view('{{ singular }}/show', $data);
    }

    /**
     * Create the form for creating a new {{ singular | lower | replace({'_': '-'}) }}.
     *
     * @return void
     */
    public function create()
    {
        $data = array();
        $this->_set_form_validation();

        if ($this->form_validation->run()) {
{% for column in columns if column != 'datetime_updated' %}
{% set hasGenders = (column.field == 'gender') ? TRUE : FALSE %}
{% set hasMaritalStatus = (column.field == 'marital_status') ? TRUE : FALSE %}
{% if column == 'datetime_created' %}
            $this->{{ singular }}->{{ isCamel ? camel[column] : underscore[column] }}('now');
{% else %}
{% if column in foreignKeys|keys %}

            ${{ foreignKeys[column] }} = $this->{{ type }}->find('{{ foreignKeys[column] }}', $this->input->post('{{ column }}'));
            $this->{{ singular }}->{{ isCamel ? camel[column] : underscore[column] }}(${{ foreignKeys[column] }});{{ columns[loop.index0 + 1] in foreignKeys|keys ? '' : "\n"}}
{% else %}
            $this->{{ singular }}->{{ isCamel ? camel[column] : underscore[column] }}($this->input->post('{{ column }}'));
{% endif %}
{% endif %}
{% endfor %}

{% if type == 'doctrine' %}
            $this->{{ type }}->entity_manager->persist($this->{{ singular }});
            $this->{{ type }}->entity_manager->flush();
{% else %}
            $this->{{ singular }}->save();
{% endif %}

            $this->session->set_flashdata('notification', 'The {{ singular | lower | replace({'_': ' '}) }} has been created successfully!');
            $this->session->set_flashdata('alert', 'success');

            redirect('{{ singular }}');
        }
{% if dropdowns | length > 0 %}

{% for dropdown in dropdowns %}
        $data['{{ dropdown.list }}'] = $this->{{ type }}->get_all('{{ dropdown.table }}')->as_dropdown('{{ dropdown.field }}');
{% endfor %}
{% endif %}
{% if hasGenders %}
        $data['genders'] = array('male' => 'Male', 'female' => 'Female');
{% elseif hasMaritalStatus %}
        $data['marital_statuses'] = array(
            'single' => 'Single',
            'married' => 'Married',
            'widowed' => 'Widowed',
            'seperated' => 'Seperated',
            'divorced' => 'Divorced'
        );
{% endif %}

        $this->load->view('{{ singular }}/create', $data);
    }

    /**
     * Edit the form for editing the specified {{ singular | lower | replace({'_': '-'}) }}.
     * 
     * @param  int $id
     * @return void
     */
    public function edit($id)
    {
        if ( ! isset($id)) {
            show_404();
        }

        $this->_set_form_validation();

        if ($this->form_validation->run()) {
            ${{ singular }} = $this->{{ type }}->find('{{ singular }}', $id);

{% for column in columns if column != 'datetime_updated' %}
{% if column == 'datetime_created' %}
            ${{ singular }}->{{ isCamel ? camel[column] : underscore[column] }}('now');
{% else %}
{% if column in foreignKeys|keys %}

            ${{ foreignKeys[column] }} = $this->{{ type }}->find('{{ foreignKeys[column] }}', $this->input->post('{{ column }}'));
            ${{ singular }}->{{ isCamel ? camel[column] : underscore[column] }}(${{ foreignKeys[column] }});{{ columns[loop.index0 + 1] in foreignKeys|keys ? '' : "\n"}}
{% else %}
            ${{ singular }}->{{ isCamel ? camel[column] : underscore[column] }}($this->input->post('{{ column }}'));
{% endif %}
{% endif %}
{% endfor %}

{% if type == 'doctrine' %}
            $this->{{ type }}->entity_manager->persist(${{ singular }});
            $this->{{ type }}->entity_manager->flush();
{% else %}
            ${{ singular }}->save();
{% endif %}

            $this->session->set_flashdata('notification', 'The {{ singular | lower | replace({'_': ' '}) }} has been updated successfully!');
            $this->session->set_flashdata('alert', 'success');

            redirect('{{ singular }}');
        }

        $data['{{ singular }}'] = $this->{{ type }}->find('{{ singular }}', $id);
{% for dropdown in dropdowns %}
        $data['{{ dropdown.list }}'] = $this->{{ type }}->get_all('{{ dropdown.table }}')->as_dropdown('{{ dropdown.field }}');
{% endfor %}
{% if hasGenders %}
        $data['genders'] = array('male' => 'Male', 'female' => 'Female');
{% elseif hasMaritalStatus %}
        $data['marital_statuses'] = array(
            'single' => 'Single',
            'married' => 'Married',
            'widowed' => 'Widowed',
            'seperated' => 'Seperated',
            'divorced' => 'Divorced'
        );
{% endif %}

        $this->load->view('{{ singular }}/edit', $data);
    }

    /**
     * Deletes the specified {{ singular | lower | replace({'_': '-'}) }} from storage.
     * 
     * @param  int $id
     * @return void
     */
    public function delete($id)
    {
        if ( ! isset($id)) {
            show_404();
        }

{% if type == 'doctrine' %}
        ${{ singular }} = $this->{{ type }}->entity_manager->find('{{ singular }}', $id);

        $this->{{ type }}->entity_manager->remove(${{ singular }});
        $this->{{ type }}->entity_manager->flush();
{% else %}
        $this->wildfire->delete('{{ singular }}', $id);
{% endif %}

        $this->session->set_flashdata('notification', 'The {{ singular | lower | replace({'_': ' '}) }} has been deleted successfully!');
        $this->session->set_flashdata('alert', 'success');

        redirect('{{ singular }}');
    }

    /**
     * Validates the input retrieved from the view.
     * 
     * @return void
     */
    private function _set_form_validation()
    {
        $this->load->library('form_validation');

{% for column in columns %}
{% if column in foreignKeys|keys %}
        $this->form_validation->set_rules('{{ column }}', '{{ foreignKeys[column] | lower | capitalize | replace({'_': ' '}) }}', 'required|greater_than[0]');
{% elseif column != 'datetime_created' and column != 'datetime_updated' %}
        $this->form_validation->set_rules('{{ column }}', '{{ column | capitalize | replace({'_': ' '}) }}', 'required');
{% endif %}
{% endfor %}
    }
}